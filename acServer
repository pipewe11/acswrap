#!/usr/bin/env -S python3 -u
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4 
#

import sys
import os
import time
import json
import argparse
import configparser
import requests
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import parse_qs, urlparse

print(sys.argv)

parser = argparse.ArgumentParser(description = "acServer")
parser.add_argument("-c", type = str, default = "server_cfg.ini")
parser.add_argument("-e", type = str, default = "entry_list.ini")
args = parser.parse_args()
print(args)

ini = configparser.ConfigParser()
ini.read(args.c)
port = int(ini["SERVER"]["HTTP_PORT"])

#while 1:
#    print("SESSION: Race")
#    time.sleep(1)
#    print("SESSION: Qualify")
#    time.sleep(2)

#print("SESSION: Race")
#time.sleep(1)
#print("")
#time.sleep(1)
#print("SESSION: Qualify")
#time.sleep(2)

info_file = "./json/127.0.0.1_8082_info.json"
json_file = "./json/127.0.0.1_8082_json.json"

address = ("0.0.0.0", port)

class MyHTTPRequestHandler(BaseHTTPRequestHandler):

    protocol_version = 'HTTP/1.1'

    def do_GET(self):

        print('path = {}'.format(self.path))

        if self.path.startswith("/INFO"):
            with open(info_file) as f:
                out = f.read().encode("utf-8")

            self.send_response(200)
            self.send_header("Content-Length", str(len(out)))
            self.send_header("Content-Type", "application/json")
            self.send_header("Connection", "Keep-Alive")
            self.end_headers()
            self.wfile.write(out)

        elif self.path.startswith("/JSON"):
            with open(json_file) as f:
                out = f.read().encode("utf-8")

            self.send_response(200)
            self.send_header("Content-Length", str(len(out)))
            self.send_header("Content-Type", "application/json")
            self.send_header("Connection", "Keep-Alive")
            self.end_headers()
            self.wfile.write(out)

with HTTPServer(address, MyHTTPRequestHandler) as server:
    server.serve_forever()

